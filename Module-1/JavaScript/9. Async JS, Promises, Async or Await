1. Using .then() and .catch()
HTML
<div id="spinner" style="display:none;">Loading events...</div>
<div id="eventList"></div>

JavaScript
document.getElementById("spinner").style.display = "block";

fetch("https://jsonplaceholder.typicode.com/posts") // Use your actual endpoint
  .then(response => {
    if (!response.ok) throw new Error("Network response was not ok");
    return response.json();
  })
  .then(data => {
    const eventList = document.getElementById("eventList");
    eventList.innerHTML = ""; // Clear existing
    data.slice(0, 5).forEach(item => {
      const div = document.createElement("div");
      div.innerHTML = `<h3>${item.title}</h3><p>${item.body}</p>`;
      eventList.appendChild(div);
    });
  })
  .catch(error => {
    console.error("Fetch error:", error);
    document.getElementById("eventList").innerText = "Failed to load events.";
  })
  .finally(() => {
    document.getElementById("spinner").style.display = "none";
  });

2. Using async/await + Loading Spinner
 JavaScript (Refactored)
async function loadEvents() {
  const spinner = document.getElementById("spinner");
  const eventList = document.getElementById("eventList");
  
  spinner.style.display = "block";
  eventList.innerHTML = ""; // Clear previous content

  try {
    const response = await fetch("https://jsonplaceholder.typicode.com/posts");
    if (!response.ok) throw new Error("Failed to fetch");
    const data = await response.json();

    data.slice(0, 5).forEach(item => {
      const div = document.createElement("div");
      div.innerHTML = `<h3>${item.title}</h3><p>${item.body}</p>`;
      eventList.appendChild(div);
    });
  } catch (error) {
    console.error("Error loading events:", error);
    eventList.innerText = "Error loading events.";
  } finally {
    spinner.style.display = "none";
  }
}

// Call the function on page load
loadEvents();
